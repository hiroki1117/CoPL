|- let rec fact = fun n ->
   if n < 2 then 1 else n * fact (n - 1) in
   fact 3
  evalto 6 by E-LetRec{
    fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] |- fact 3 evalto 6 by E-App{
      fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] |- fact >> {fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] |- _ 3 } evalto 6 by E-Var{
        ()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] => {fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] |- _ 3} evalto 6 by C-EvalArg{
          fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] |- 3 >> {()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] _} evalto 6 by E-Int{
            3 => {()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)] _ } evalto 6 by C-EvalFunR{
              fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)],n=3 |- if n<2 then 1 else n * fact (n-1) by E-If{
                fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)],n=3 |- n<2 >> {fact=()[rec fact = fun n -> if n<2 then 1 else n * fact (n-1)],n=3 |- if _ then 1 else n * fact (n-1)} evalto 6 by E-BinOp{

                }
              }
            }
          }
        }
      }
    }
  }
